GIT Инструкция

Существуют визуальные средаства управления ветками и коммитами. 
	git mergetool - для разрешения кофликтов слияния

Настройка кеша учетных данных
git config --global credential.helper cache.

Просмотр состояния текущей ветки
	git status
	Показывает изменные файлы, файлы подготовленные к коммиту, конфликты слияния при их наличии.
Просмотр изменений в файлах
	git diff
Переименовать файл в локалном репозитории
	git mv filename newfilename
Добавить измененные файлы к коммиту
	git add [fileName1] [fileNmae2]
УБрать измененный файлы из коммита
	git reset HEAD FileName
Отменить изменения в файле, привести его к виду последнего коммитами
	git checkout -- FileName
Сделать коммит изменений
	git commit
	Потребуется сделать комментарий в заданном в конфиге редакторе, чтобы сделать коментарий сразу нужно использовать ключ -m 'My comment'
Просмотри истории коммитов
	git log
Удалить файл из каталога и из гит
	git rm FileName
Удалить файл только из гит
	git rm --cached FileName
	
УПРАВЛЕНИЕ ВЕТКАМИ
Создание новой ветки
	git branch [shortName]
Переключение веток
	git checkout [shortName]
	Ключ -b позволяет создать новую ветку и сразу переключиться на нее.
	git checkout -b [shortName] [server-name/branch-name] Создает новую ветку, на основе удаленног репозитория и переключается на нее.
Слияние веток
	git merge [shortName]
	Слияние нужно производить из той ветки в которую нужно влить и указывать имя той ветки которую нужно влить.
	Слияние не убивает изменения одной ветки другими, а добавляет их.
Удаление локальной ветки
	git branch -d [shortName]
Просмотр имеющихся веток
	git branch
	-v позволяет посмотреть последний коммит на каждой из веток.
	Чтобы посмотреть те ветки, которые уже слиты с текущей, можно выполнить команду git branch --merged. И наоборот --no-merged
	-vv посмотреть какие отслеживаемые ветки уже установлены
		Отобразится список ваших локальных веток с дополнительной информацией, включая то, какая из веток отслеживается,
		и если локальная ветка опережает, отстает или равняется относительно основной ветки.
	
Переключить основной удаленный репозиторий для ветки
	git branch -u [server-name/branch-name]

РАБОТА С УДАЛЕННЫМИ ВЕТКАМИ
	Чтобы обновить состояние своей удаленной ветки с веткой на сервере
	git fetch
Просмотр удаленных репозиториев
	git remote
	-v посмотреть адреса для чтения и записи, приявязанные к репозиторию.
Добавление удаленных репозиториев
	git remote add [shortName][url]
Получение измененний из удаленного репозитория
	git fetch [remote-name]  - забирает данные с репозитория, но не сливает с веткой
	git merge [server-name/branch-name] - Сливает данные с 
	git pull [remote-name] - забирает изменения из репозитория и сливает их с локальной веткой
Отправка изменений в удаленный репозиторий 
	git push [remote-name] [branch-name]
	Для отправки изменений на удаленную ветку с другим именем нужно указать ее имя после имени локальной:
	git push [remote-name] [local_branch-name]:[remote_branch_name]
Просмотр удаленного репозитория
	git remote show [remote-name]
Удаление и переименование удалённых репозиториев
	git remote rename [oldShortName] [newShortName]
	git remote rm [ShortName]
Переключить удаленный репозиторий на другую ветку
	git checkout --track [server-name/branch-name]
Удаление веток на удалённом сервере
	git push origin --delete BranchName


	
ПЕРЕБАЗИРОВАНИЕ
Слияние разделенной истории коммитов
	git checkout experiment
	git rebase master
	Это работает следующим образом: берется общий родительский снимок (snapshot) двух веток (той, в которой вы находитесь, 
	и той, поверх которой вы выполняете перебазирование); берется дельта (diff) каждого коммита той ветки, на который вы находитесь, 
	эти дельты сохраняются во временные файлы; текущая ветка устанавливается на тот же коммит, что и ветка, поверх которой вы выполняете 
	перебазирование; и, наконец, ранее сохраненные дельты применяются поочереди.
Чтобы влить в мастер тематическую ветку ответвленную от другой тематической ветки нужно выполнить перебазирование
	git rebase --onto master [childBranch] [childBranch2] - чайлд2 вольется в мастер.
	"Это прямое указание “переключиться на ветку client, то есть взять изменения от общего предка веток client и server и повторить их на master”."
После перебазирования нужно выполнять перемотку ветки
	git checkout master
	git merge [childBranch2]